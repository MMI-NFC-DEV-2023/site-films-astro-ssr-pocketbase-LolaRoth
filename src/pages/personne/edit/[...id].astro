---
import { Debug } from "astro:components";
import { pb } from "../../../backend";
import Layout from "../../../layouts/Layout.astro";
import {
  PersonneNationaliteOptions,
  PersonneProfessionOptions,
} from "../../../pocketbase-typegen";
import type { PersonneResponse } from "../../../pocketbase-typegen";
import type { ClientResponseError } from "pocketbase";
export const prerender = false;
const id = Astro.params.id;

let message = "";

if (id){
    const personne = await pb.collection("personne").getOne(id).catch((e) => {
        message = (e as ClientResponseError).message;
        return {} as PersonneResponse;
    });
}

const personne = id
  ? await Astro.locals.pb.collection("personne").getOne(id)
  : ({} as PersonneResponse);
// pour faire une personne vide ou une prendre les donnnées d'une personne existante

if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  try {
  const personne = await (id
    ? pb.collection("personne").update(id, data)
    : pb.collection("personne").create(data));
  return Astro.redirect(
    `/personne/${personne.id}-${encodeURIComponent(personne.nom)}`
  );
} catch (e) {
    message = (e as ClientResponseError).message;
    }
}

function formatDate(date: string) {
  return date ? new Date(date).toISOString().split("T")[0] : "";
}
---

<Layout pageTitle="Edit">
    {message && <p class="text-red-500"> Erreur : {message}</p>}
  <h1 class="text-center text-2xl text-pink-600 my-4">Ajouter une personne</h1>
  <section class="mx-8">
    <form method="post" class="*:contents grid grid-cols-2">
      <input type="hidden" name="id" value={personne.id} />
      <label class="m-3"
        >nationalite
        <select name="nationalite">
          {
            Object.entries(PersonneNationaliteOptions).map(([key, value]) => (
              <option selected={personne.nationalite === value}>{key}</option>
            ))
          }
        </select>
      </label>
      <label
        >Date Naissance
        <input
          type="date"
          name="DateNaissance"
          value={formatDate(personne.DateNaissance)}
        />
      </label>
      <label
        >Date Décès
        <input
          type="date"
          name="DateDeces"
          value={formatDate(personne.DateDeces)}
        />
      </label>
      <label
        >Lieu Naissance
        <input
          type="text"
          name="lieuNaissance"
          value={personne.lieuNaissance}
        />
      </label>
      <label
        >Nom
        <input type="text" name="nom" value={personne.nom} />
      </label>
      <fieldset class="block! col-span-2">
        <legend>Profession</legend>
        {
          Object.entries(PersonneProfessionOptions).map(([key, value]) => (
            <label>
              {key}
              <input
                type="checkbox"
                name="profession"
                checked={personne.profession?.includes(value)}
                value={value}
              />
            </label>
          ))
        }
      </fieldset>
      <button >{id? "Modifier" : "Ajouter"}</button>
    </form>
  </section>
</Layout>
